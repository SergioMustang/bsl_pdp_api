"""init migration

Revision ID: 1.0
Revises: 
Create Date: 2022-08-22 01:00:47.310279

"""
import sqlalchemy as sa
from alembic import op
from db.models.user import (
    Role,
    User,
)
from passlib.apps import custom_app_context as pwd_context
from sqlalchemy import (
    orm,
    select,
)

# revision identifiers, used by Alembic.
revision = '1.0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('title', sa.String(length=1024), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('title')
    )
    op.create_table('role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('title', sa.String(length=128), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('title')
    )
    op.create_table('role_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('permission_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(length=128), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('full_name', sa.String(length=128), nullable=False),
    sa.Column('email', sa.String(length=128), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('from_ad', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('login')
    )
    # ### end Alembic commands ###
    op.execute("INSERT INTO public.role (name, title) VALUES ('admin', 'Администратор')")
    op.execute("INSERT INTO public.role (name, title) VALUES ('user', 'Пользователь')")
    op.execute("INSERT INTO public.permission (name, title) VALUES ('user_management', 'Управление пользователями')")
    op.execute("INSERT INTO public.role_permission (role_id, permission_id) VALUES (1, 1)")

    bind = op.get_bind()
    session = orm.Session(bind=bind)
    admin_role = session.execute(select(Role).filter_by(name="admin")).scalars().first()
    admin = User(
        login='admin',
        full_name='admin',
        password=pwd_context.encrypt('admin'),
        email='admin@admin.ru',
        role_id=admin_role.id,
    )
    session.add(admin)
    session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.drop_table('role_permission')
    op.drop_table('role')
    op.drop_table('permission')
    # ### end Alembic commands ###
